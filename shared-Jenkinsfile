@Library('Jenkinsshared') _  

def clusterInfo

pipeline {
    agent any

    parameters {
        base64File(name: 'cluster_properties_yamlfile', description: 'Upload your cluster YAML file')
    }

    stages {
        stage('Pre-checks') {
            steps {
                withFileParameter('cluster_properties_yamlfile') {
                    script {
                        clusterInfo = readClusterYaml(env.cluster_properties_yamlfile)

                        echo "Sending notification to Slack channel: ${clusterInfo.slack_channel}"

                        slackNotifier.notifyStage('Pre-checks', clusterInfo.slack_channel) {
                            def summary = ""

                            def kubeconfigSecretId = clusterInfo.kubeconfig_secret

                            withCredentials([file(credentialsId: kubeconfigSecretId, variable: 'SECRET_FILE')]) {
                                def kubePath = "${env.SECRET_FILE}"

                                // Validate k8s version
                                checkVersion("${clusterInfo.current_cluster_version}", "${clusterInfo.target_version}")
                                summary += ":bookmark_tabs: Upgrade Version check passed: ${clusterInfo.current_cluster_version} -> ${clusterInfo.target_version}\n"

                                // Backup check
                                echo "k8s backup: ${clusterInfo.cluster_backup_taken}"
                                summary += ":cd: Eks Cluster Backup status: ${clusterInfo.cluster_backup_taken}\n"

                                // Validate kubeconfig
                                def result = sh(
                                    script: """
                                        /usr/local/bin/docker run --rm --network host \\
                                          -v ~/.aws:/root/.aws \\
                                          -v ${kubePath}:/file -e KUBECONFIG=/file \\
                                          heyvaldemar/aws-kubectl kubectl cluster-info > /dev/null 2>&1 && echo "valid" || echo "invalid"
                                    """,
                                    returnStdout: true
                                ).trim()

                                summary += result == "valid"
                                    ? ":white_check_mark: Kubeconfig is valid\n"
                                    : ":x: Kubeconfig is invalid\n"

                                // Run kubent check
                                sh """
                                    /usr/local/bin/docker run --rm --network host \\
                                      -v ${kubePath}:/root/.kube/config \\
                                      -v ~/.aws:/root/.aws \\
                                      kubent:aws01 -t ${clusterInfo.target_version} -o json -e -k /root/.kube/config
                                """
                                summary += ":mag: API deprecated check: No deprecated APIs found\n"
                            }
                            return summary
                        }
                    }
                }
            }
        }

        stage('k8s cluster upgrade') {
            steps {
                script {    
                    def currentVersion = getEksClusterVersion(clusterInfo.name, clusterInfo.region)

                    if (currentVersion == clusterInfo.target_version) {
                        echo "Cluster is already at the target version: ${clusterInfo.target_version}. Skipping upgrade."
                        currentBuild.result = 'SUCCESS'
                        return  // exit stage early
                    }                
                    slackNotifier.notifyStage('k8s cluster upgrade', clusterInfo.slack_channel) {
                        def summary = ""
                        def userInput = input message: 'Do you want to upgrade the cluster?', ok: 'Approve', parameters: []
                        def result = checkAndUpgradeEksCluster(clusterInfo.name, clusterInfo.region, clusterInfo.target_version)
                        summary += result == "true"
                            ? ":white_check_mark: Cluster upgraded to version ${clusterInfo.target_version}\n"
                            : ":x: The cluster is already running version ${clusterInfo.target_version}\n"
                    return summary
                    }
                }
            }
        }

        stage('k8s Node Group Upgrade') {
            steps {
                script {
                    def nodegroupVersionMap = checkEksNodeGroupVersion(clusterInfo.name, clusterInfo.region)

                    def skipped = []
                    def upgraded = []
                    def failures = []
                    def nodegroupsToUpgrade = []

                    clusterInfo.node_pools.each { nodepool ->
                        def currentVersion = nodegroupVersionMap[nodepool]
                        if (!currentVersion) {
                            echo "‚ö†Ô∏è Warning: Nodegroup '${nodepool}' not found in cluster."
                            failures << nodepool
                        } else if (currentVersion != clusterInfo.target_version) {
                            echo "üîß Nodegroup '${nodepool}' version is ${currentVersion}. Target is ${clusterInfo.target_version}. Upgrade required."
                            nodegroupsToUpgrade << nodepool
                        } else {
                            echo "‚úÖ Nodegroup '${nodepool}' is already at target version ${currentVersion}. Skipping upgrade."
                            skipped << nodepool
                        }
                    }

                    if (nodegroupsToUpgrade.isEmpty()) {
                        echo "üéâ All nodegroups are already up-to-date."
                        return
                    }

                    def userInput = input(
                        id: 'NodegroupUpgradeApproval',
                        message: "üöÄ Proceed with upgrading the following nodegroups?\n${nodegroupsToUpgrade.join(', ')}",
                        ok: 'Yes'
                    )

                    nodegroupsToUpgrade.each { nodepool ->
                        slackNotifier.notifyStage("Nodegroup Upgrade: ${nodepool}", clusterInfo.slack_channel) {
                            echo "üîß Starting upgrade for nodepool '${nodepool}'..."
                            def upgradeResult = upgradeEksNodeGroupVersion(clusterInfo.name, nodepool, clusterInfo.region, clusterInfo.target_version)
                            if (upgradeResult == "true") {
                                upgraded << nodepool
                                return ":white_check_mark: Upgrade complete for nodegroup '${nodepool}' version: '${clusterInfo.target_version}'"
                            } else {
                                failures << nodepool
                                return ":x: Upgrade failed for nodegroup '${nodepool}'"
                            }
                        }
                    }

                    echo "‚úÖ Upgraded: ${upgraded}"
                    echo "üü¶ Skipped: ${skipped}"
                    echo "‚ùå Failures: ${failures}"

                    if (failures) {
                        error("‚ùå Some nodegroups failed to upgrade: ${failures.join(', ')}")
                    }
                }
            }
        }

        stage('EKS Add-ons Upgrade') {
            steps {
                script {
                    slackNotifier.notifyStage('EKS Add-ons Upgrade', clusterInfo.slack_channel) {
                        def summary = ""
                        def result = eksAddonManager(clusterInfo.add_ons, clusterInfo.target_version, clusterInfo.name, clusterInfo.region)
                        result.each { addonResult ->
                            def name = addonResult.name
                            def version = addonResult.version
                            def status = addonResult.status
                            summary += status == "updated"
                                ? ":white_check_mark: ${name} upgraded to ${version}\n"
                                : status == "skipped"
                                ? ":arrow_right: ${name} already up to date (${version})\n"
                                : ":x: ${name} failed to upgrade\n"
                        }
                        return summary
                    }
                }
            }
        }

    }
}

