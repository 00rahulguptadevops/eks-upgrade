@Library('Jenkinsshared@demo-version-v1') _  

def clusterInfo

pipeline {
    agent any

    parameters {
        base64File(name: 'cluster_properties_yamlfile', description: 'Upload your cluster YAML file')
    }

    stages {
        stage('Pre-checks') {
            steps {
                withFileParameter('cluster_properties_yamlfile') {
                    script {
                        clusterInfo = readClusterYaml(env.cluster_properties_yamlfile)
                        slackNotifier.notifyStage('Pre-checks', clusterInfo.slack_channel) {
                            def summary = ""


                            withCredentials([file(credentialsId: clusterInfo.kubeconfig_secret, variable: 'SECRET_FILE')]) {
                                // Validate k8s version
                                checkVersion("${clusterInfo.current_cluster_version}", "${clusterInfo.target_version}")
                                summary += ":bookmark_tabs: Upgrade Version check passed: ${clusterInfo.current_cluster_version} -> ${clusterInfo.target_version}\n"

                                // Backup check
                                echo "k8s backup: ${clusterInfo.cluster_backup_taken}"
                                summary += ":cd: Eks Cluster Backup status: ${clusterInfo.cluster_backup_taken}\n"

                                // Validate kubeconfig
                                def result = validateKubeConfig(env.SECRET_FILE)
                                summary += "${result.summary}\n"

                                // Run kubent check
                                def apicheck = k8sApiVersionCheck(env.SECRET_FILE, clusterInfo.target_version)
                                summary += "${apicheck.summary}\n"
                            }
                            return summary
                        }
                    }
                }
            }
        }

        stage('k8s cluster upgrade') {
            steps {
                script {    
                    slackNotifier.notifyStage('k8s cluster upgrade', clusterInfo.slack_channel) {
                        def summary = ""
                        def result = checkAndUpgradeEksCluster(clusterInfo.name, clusterInfo.region, clusterInfo.target_version)
                        summary += "${result.summary}\n"
                    return summary
                    }
                }
            }
        }

        stage('k8s Node Group Upgrade') {
            steps {
                script {
                    upgradeEksNodeGroupVersion([
                        name: clusterInfo.name,
                        region: clusterInfo.region,
                        target_version: clusterInfo.target_version,
                        node_pools: clusterInfo.node_pools,
                        slack_channel: clusterInfo.slack_channel
                    ])
                }
            }
        }
        stage('EKS Add-ons Upgrade') {
            steps {
                script {
                    slackNotifier.notifyStage('EKS Add-ons Upgrade', clusterInfo.slack_channel) {
                        def result = eksAddonManager(
                            clusterInfo.add_ons,
                            clusterInfo.target_version,
                            clusterInfo.name,
                            clusterInfo.region
                        )
                        return "ðŸ“‹ Add-on Update Summary:\n${result.summary}"
                    }
                }
            }
        }

    }
}

